//
//  StyleKitName.swift
//  SliderControl
//
//  Created by BenandHugo on 09/08/2015.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static var timelapseColor: UIColor = UIColor(red: 0.169, green: 0.714, blue: 0.451, alpha: 1.000)
        static var settingsColor: UIColor = UIColor(red: 0.110, green: 0.459, blue: 0.737, alpha: 1.000)
        static var realtimeColor: UIColor = UIColor(red: 0.969, green: 0.737, blue: 0.118, alpha: 1.000)
        static var bgColor: UIColor = UIColor(red: 0.082, green: 0.078, blue: 0.082, alpha: 1.000)
        static var textColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var dimmedColor: UIColor = UIColor(red: 0.400, green: 0.392, blue: 0.380, alpha: 1.000)
    }

    //// Colors

    public class var timelapseColor: UIColor { return Cache.timelapseColor }
    public class var settingsColor: UIColor { return Cache.settingsColor }
    public class var realtimeColor: UIColor { return Cache.realtimeColor }
    public class var bgColor: UIColor { return Cache.bgColor }
    public class var textColor: UIColor { return Cache.textColor }
    public class var dimmedColor: UIColor { return Cache.dimmedColor }

    //// Drawing Methods

    public class func drawTimelapseScreen(#aPosition: CGFloat, bPosition: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let refMenu = UIImage(named: "refMenu.png")!

        //// Variable Declarations
        let ablinePosition: CGFloat = aPosition
        let abLineWidth: CGFloat = bPosition - aPosition

        //// Picture Drawing
        let pictureRect = CGRectMake(0, 0, 1504, 2670)
        let picturePath = UIBezierPath(roundedRect: pictureRect, cornerRadius: 9)
        CGContextSaveGState(context)
        picturePath.addClip()
        refMenu.drawInRect(CGRectMake(0, 0, refMenu.size.width, refMenu.size.height))
        CGContextRestoreGState(context)
        let pictureStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        pictureStyle.alignment = NSTextAlignment.Center

        let pictureFontAttributes = [NSFontAttributeName: UIFont(name: "DINPro-Light", size: 12)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: pictureStyle]

        "SECONDS".drawInRect(pictureRect, withAttributes: pictureFontAttributes)


        //// sliderLine Drawing
        let sliderLinePath = UIBezierPath(roundedRect: CGRectMake(120, 1038, 1265, 24), cornerRadius: 8)
        StyleKitName.dimmedColor.setFill()
        sliderLinePath.fill()


        //// aCircle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, aPosition, 1050)

        var aCirclePath = UIBezierPath(ovalInRect: CGRectMake(-46, -46, 92, 92))
        StyleKitName.timelapseColor.setFill()
        aCirclePath.fill()

        CGContextRestoreGState(context)


        //// bCircle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, bPosition, 1050)

        var bCirclePath = UIBezierPath(ovalInRect: CGRectMake(-46, -46, 92, 92))
        StyleKitName.timelapseColor.setFill()
        bCirclePath.fill()

        CGContextRestoreGState(context)


        //// abLine Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, ablinePosition, 1049.52)

        let abLinePath = UIBezierPath(rect: CGRectMake(0, -11.52, abLineWidth, 24))
        StyleKitName.timelapseColor.setFill()
        abLinePath.fill()

        CGContextRestoreGState(context)


        //// Arrow Drawing
        var arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(487.36, 2024.63))
        arrowPath.addLineToPoint(CGPointMake(438.89, 1976.07))
        arrowPath.addCurveToPoint(CGPointMake(438.89, 1908.93), controlPoint1: CGPointMake(420.37, 1957.53), controlPoint2: CGPointMake(420.37, 1927.47))
        arrowPath.addLineToPoint(CGPointMake(487.36, 1860.37))
        arrowPath.addCurveToPoint(CGPointMake(503.63, 1860.36), controlPoint1: CGPointMake(491.85, 1855.88), controlPoint2: CGPointMake(499.13, 1855.87))
        arrowPath.addCurveToPoint(CGPointMake(503.64, 1876.63), controlPoint1: CGPointMake(508.12, 1864.85), controlPoint2: CGPointMake(508.13, 1872.13))
        arrowPath.addLineToPoint(CGPointMake(455.16, 1925.18))
        arrowPath.addCurveToPoint(CGPointMake(455.16, 1959.82), controlPoint1: CGPointMake(445.61, 1934.74), controlPoint2: CGPointMake(445.61, 1950.26))
        arrowPath.addLineToPoint(CGPointMake(503.64, 2008.37))
        arrowPath.addCurveToPoint(CGPointMake(503.63, 2024.64), controlPoint1: CGPointMake(508.13, 2012.87), controlPoint2: CGPointMake(508.12, 2020.15))
        arrowPath.addCurveToPoint(CGPointMake(487.36, 2024.63), controlPoint1: CGPointMake(499.13, 2029.13), controlPoint2: CGPointMake(491.85, 2029.12))
        arrowPath.closePath()
        StyleKitName.timelapseColor.setFill()
        arrowPath.fill()


        //// Symbol Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1081, 2028)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let symbolRect = CGRectMake(0, 0, 82, 171)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        StyleKitName.drawMasterArrow()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Text Drawing
        let textRect = CGRectMake(541, 1857, 423, 171)
        var textTextContent = NSString(string: "SECONDS")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "DINPro-Light", size: 71)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRectMake(1124, 2476, 9, 120)
        CGContextSaveGState(context)
        UIRectClip(symbol2Rect)
        CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y)

        StyleKitName.drawCanvas1()
        CGContextRestoreGState(context)


        //// Symbol 3 Drawing
        let symbol3Rect = CGRectMake(372, 2476, 9, 120)
        CGContextSaveGState(context)
        UIRectClip(symbol3Rect)
        CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y)

        StyleKitName.drawCanvas1()
        CGContextRestoreGState(context)


        //// Symbol 4 Drawing
        let symbol4Rect = CGRectMake(579, 271, 346, 346)
        CGContextSaveGState(context)
        UIRectClip(symbol4Rect)
        CGContextTranslateCTM(context, symbol4Rect.origin.x, symbol4Rect.origin.y)
        CGContextScaleCTM(context, symbol4Rect.size.width / 512, symbol4Rect.size.height / 512)

        StyleKitName.drawTimelapseIcon()
        CGContextRestoreGState(context)


        //// Symbol 5 Drawing
        let symbol5Rect = CGRectMake(748, 2476, 9, 120)
        CGContextSaveGState(context)
        UIRectClip(symbol5Rect)
        CGContextTranslateCTM(context, symbol5Rect.origin.x, symbol5Rect.origin.y)

        StyleKitName.drawCanvas1()
        CGContextRestoreGState(context)


        //// Symbol 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 191, 2531.5)

        let symbol6Rect = CGRectMake(-80, -80, 160, 160)
        CGContextSaveGState(context)
        UIRectClip(symbol6Rect)
        CGContextTranslateCTM(context, symbol6Rect.origin.x, symbol6Rect.origin.y)
        CGContextScaleCTM(context, symbol6Rect.size.width / 512, symbol6Rect.size.height / 512)

        StyleKitName.drawTimelapseIcon()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Symbol 7 Drawing
        let symbol7Rect = CGRectMake(486, 2450, 170.5, 170.5)
        CGContextSaveGState(context)
        UIRectClip(symbol7Rect)
        CGContextTranslateCTM(context, symbol7Rect.origin.x, symbol7Rect.origin.y)
        CGContextScaleCTM(context, symbol7Rect.size.width / 512, symbol7Rect.size.height / 512)

        StyleKitName.drawCameraIcon()
        CGContextRestoreGState(context)


        //// aText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, aPosition, 859)

        let aTextRect = CGRectMake(-46, 0, 92, 107)
        let aTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        aTextStyle.alignment = NSTextAlignment.Center

        let aTextFontAttributes = [NSFontAttributeName: UIFont(name: "DINPro-Light", size: 74)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: aTextStyle]

        "A".drawInRect(aTextRect, withAttributes: aTextFontAttributes)

        CGContextRestoreGState(context)


        //// bText Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, bPosition, 859)

        let bTextRect = CGRectMake(-46, 0, 92, 107)
        let bTextStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        bTextStyle.alignment = NSTextAlignment.Center

        let bTextFontAttributes = [NSFontAttributeName: UIFont(name: "DINPro-Light", size: 74)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: bTextStyle]

        "B\n".drawInRect(bTextRect, withAttributes: bTextFontAttributes)

        CGContextRestoreGState(context)
    }

    public class func drawMasterArrow() {

        //// Arrow Drawing
        var arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(62.36, 167.63))
        arrowPath.addLineToPoint(CGPointMake(13.89, 119.07))
        arrowPath.addCurveToPoint(CGPointMake(13.89, 51.93), controlPoint1: CGPointMake(-4.63, 100.53), controlPoint2: CGPointMake(-4.63, 70.47))
        arrowPath.addLineToPoint(CGPointMake(62.36, 3.37))
        arrowPath.addCurveToPoint(CGPointMake(78.63, 3.36), controlPoint1: CGPointMake(66.85, -1.12), controlPoint2: CGPointMake(74.13, -1.13))
        arrowPath.addCurveToPoint(CGPointMake(78.64, 19.63), controlPoint1: CGPointMake(83.12, 7.85), controlPoint2: CGPointMake(83.13, 15.13))
        arrowPath.addLineToPoint(CGPointMake(30.16, 68.18))
        arrowPath.addCurveToPoint(CGPointMake(30.16, 102.82), controlPoint1: CGPointMake(20.61, 77.74), controlPoint2: CGPointMake(20.61, 93.26))
        arrowPath.addLineToPoint(CGPointMake(78.64, 151.37))
        arrowPath.addCurveToPoint(CGPointMake(78.63, 167.64), controlPoint1: CGPointMake(83.13, 155.87), controlPoint2: CGPointMake(83.12, 163.15))
        arrowPath.addCurveToPoint(CGPointMake(62.36, 167.63), controlPoint1: CGPointMake(74.13, 172.13), controlPoint2: CGPointMake(66.85, 172.12))
        arrowPath.closePath()
        StyleKitName.timelapseColor.setFill()
        arrowPath.fill()
    }

    public class func drawTimelapseIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 241.15, 267.71)
        CGContextScaleCTM(context, 0.98, 0.98)



        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(-176.9, -176.26, 382.8, 382.8))
        StyleKitName.timelapseColor.setStroke()
        ovalPath.lineWidth = 16
        ovalPath.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(-6.93, -215.54, 42.85, 39.25))
        StyleKitName.timelapseColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(-52.22, -240.54, 133.45, 39.25), cornerRadius: 13)
        StyleKitName.timelapseColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRectMake(7.35, -139.34, 14.3, 49.75), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 106.11, -76.52)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRectMake(-7.25, -24.39, 14.5, 48.78), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle4Path.fill()

        CGContextRestoreGState(context)


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRectMake(120.17, 7.99, 48.75, 14.3), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 106.11, 106.84)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(-24.39, -7.25, 48.78, 14.5), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle6Path.fill()

        CGContextRestoreGState(context)


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRectMake(7.35, 120.81, 14.3, 48.75), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -77.42, 106.84)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle8Path = UIBezierPath(roundedRect: CGRectMake(-7.25, -24.39, 14.5, 48.78), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle8Path.fill()

        CGContextRestoreGState(context)


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(roundedRect: CGRectMake(-139.98, 7.99, 48.75, 14.3), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -77.42, -76.52)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle10Path = UIBezierPath(roundedRect: CGRectMake(-24.39, -7.25, 48.78, 14.5), cornerRadius: 1)
        StyleKitName.timelapseColor.setFill()
        rectangle10Path.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawCameraIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Image Declarations
        let cameraIconOrange = UIImage(named: "cameraIconOrange.png")!

        //// Picture Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 63, 31.84)
        CGContextScaleCTM(context, 0.88, 0.88)

        let picturePath = UIBezierPath(rect: CGRectMake(0, 0, 439, 507))
        CGContextSaveGState(context)
        picturePath.addClip()
        cameraIconOrange.drawInRect(CGRectMake(0, 0, cameraIconOrange.size.width, cameraIconOrange.size.height))
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)
    }

    public class func drawCanvas1() {

        //// separator Drawing
        let separatorPath = UIBezierPath(roundedRect: CGRectMake(0, 0, 9, 120), cornerRadius: 4.5)
        StyleKitName.timelapseColor.setFill()
        separatorPath.fill()
    }

    //// Generated Images

    public class func imageOfTimelapseScreen(#aPosition: CGFloat, bPosition: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(1504, 2670), false, 0)
            StyleKitName.drawTimelapseScreen(aPosition: aPosition, bPosition: bPosition)

        let imageOfTimelapseScreen = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTimelapseScreen
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
